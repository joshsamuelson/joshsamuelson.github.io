<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Josh Samuelson]]></title>
  <link href="http://joshsamuelson.github.io/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://joshsamuelson.github.io/"/>
  <updated>2015-02-06T11:09:33-08:00</updated>
  <id>http://joshsamuelson.github.io/</id>
  <author>
    <name><![CDATA[Josh Samuelson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Contain Yourself]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself/"/>
    <updated>2015-02-05T17:14:04-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself</id>
    <content type="html"><![CDATA[<p>My most recent project has given me a chance to play with docker again. I first heard of docker when I was in the midst of trying to learn puppet. I remember thinking to myself &ldquo;This is great, I don&rsquo;t have to learn a whole new language, I can just do everything in shell scripts in my Dockerfile, if it gets screwed up I&rsquo;ll just trash it and build a new one.&rdquo;</p>

<p>Now that I understand how puppet works and what it&rsquo;s really for, I realize how silly that way of thinking is. Using docker that way is essentially a more conventient way to manage golden images, but it still fraught with the maintenance nightmares that come from custom setup scripts and golden images. I think the idea of immutable infrastructure is appealing, but it doesn&rsquo;t solve the same problems as configuration management.</p>

<p>What I have gotten a chance to explore is what <em>else</em> docker is good for. I&rsquo;ve been using it for sandboxed nodes in a standalone mockup of a puppet based infrastructure, i.e. a Puppet Enterprise master that also hosts a bunch of docker containers that pretend to be nodes. As far as the master is concerned, they are totally separate machines and it offers a good way to simulate a larger environment in a lightweight way. That&rsquo;s not what docker was designed to do, per se, but it&rsquo;s working amazingly well.</p>

<p>Since I wasn&rsquo;t really using it for it&rsquo;s intended purpose at work, I decided to play around with it at home. I reformatted my iMac, which had been running Mint. It had been acting a little weird, it was having some package management corruption issues, the kind of thing I hate debugging, so I just wiped it out and installed Ubuntu 14.04. One of the things I lost in that was my installation of PLEX which meant I couldn&rsquo;t stream shows from the mac to my TV anymore (Sara was a bit bothered because she wanted to watch MASH). Since I had a fresh install with nothing but docker and puppet installed, I decided to try a dockerized version of PLEX. I found an appropriate image on docker&rsquo;s website and ran it using Gareth Rushgrove&rsquo;s docker module from the puppet forge. Basically all I had to do was declare the container with a couple of folders mapped, one for config and one for data, and that was it PLEX was running again.</p>

<p>That&rsquo;s what docker is good for, to save you from the dependency hell that so often comes with running applications. It lets you say &ldquo;I want this application, here&rsquo;s the config and data&rdquo; instead of saying &ldquo;I need to install a bunch of stuff I don&rsquo;t care about, some of which might conflict with what I currently have installed and also might break because of network issues or corrupted packages, just so I can get to the application I actually want installed.&rdquo; Docker is especially wonderful at handling packages that have conflicting dependencies. Because everything is inside the container, you just don&rsquo;t have to worry about it.</p>

<p>The way I see it, docker solves a real problem that has driven SysAdmins totally nuts. Docker allows clean and easy packaging of applications, it removes the unknowns of deployment and allows apps&#8217; dependencies to be pinned to a version. If designed correctly, they also allow package maintainers to easily update internal dependencies and application code without worrying about all of the possible platforms that users might be running. It does this well. It does it so well that people begin to think they don&rsquo;t actually need configuration management. Depending on your environment, you might not, or might not need much more than a simple manifest and <code>puppet apply</code>.</p>

<p>The thing is, puppet and docker solve different problems. Puppet is often used to solve some of the problems that docker solves, that&rsquo;s true. For those cases, docker is better, hands down. Puppet does make it much easier to manage applications and all the hassle of updates and patches. But that isn&rsquo;t really what puppet it for. Puppet is a way of defining infractructure in a declarative way. It&rsquo;s a way of defining the finished state of a system and a tool for making that happen. I&rsquo;m really glad that Gareth built the docker module for puppet because it&rsquo;s a great example of how puppet and docker work well together.</p>

<p>My PLEX server is case in point, it&rsquo;s defined by puppet, and the &ldquo;application&rdquo; (i.e. the docker container of the PLEX app and dependencies) is managed by puppet. Docker takes care of what docker is good at, puppet takes care of what puppet is good at.</p>
]]></content>
  </entry>
  
</feed>
