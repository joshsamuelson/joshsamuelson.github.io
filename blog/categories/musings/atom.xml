<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Musings | Josh Samuelson]]></title>
  <link href="http://joshsamuelson.github.io/blog/categories/musings/atom.xml" rel="self"/>
  <link href="http://joshsamuelson.github.io/"/>
  <updated>2015-02-06T11:09:33-08:00</updated>
  <id>http://joshsamuelson.github.io/</id>
  <author>
    <name><![CDATA[Josh Samuelson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Contain Yourself]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself/"/>
    <updated>2015-02-05T17:14:04-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself</id>
    <content type="html"><![CDATA[<p>My most recent project has given me a chance to play with docker again. I first heard of docker when I was in the midst of trying to learn puppet. I remember thinking to myself &ldquo;This is great, I don&rsquo;t have to learn a whole new language, I can just do everything in shell scripts in my Dockerfile, if it gets screwed up I&rsquo;ll just trash it and build a new one.&rdquo;</p>

<p>Now that I understand how puppet works and what it&rsquo;s really for, I realize how silly that way of thinking is. Using docker that way is essentially a more conventient way to manage golden images, but it still fraught with the maintenance nightmares that come from custom setup scripts and golden images. I think the idea of immutable infrastructure is appealing, but it doesn&rsquo;t solve the same problems as configuration management.</p>

<p>What I have gotten a chance to explore is what <em>else</em> docker is good for. I&rsquo;ve been using it for sandboxed nodes in a standalone mockup of a puppet based infrastructure, i.e. a Puppet Enterprise master that also hosts a bunch of docker containers that pretend to be nodes. As far as the master is concerned, they are totally separate machines and it offers a good way to simulate a larger environment in a lightweight way. That&rsquo;s not what docker was designed to do, per se, but it&rsquo;s working amazingly well.</p>

<p>Since I wasn&rsquo;t really using it for it&rsquo;s intended purpose at work, I decided to play around with it at home. I reformatted my iMac, which had been running Mint. It had been acting a little weird, it was having some package management corruption issues, the kind of thing I hate debugging, so I just wiped it out and installed Ubuntu 14.04. One of the things I lost in that was my installation of PLEX which meant I couldn&rsquo;t stream shows from the mac to my TV anymore (Sara was a bit bothered because she wanted to watch MASH). Since I had a fresh install with nothing but docker and puppet installed, I decided to try a dockerized version of PLEX. I found an appropriate image on docker&rsquo;s website and ran it using Gareth Rushgrove&rsquo;s docker module from the puppet forge. Basically all I had to do was declare the container with a couple of folders mapped, one for config and one for data, and that was it PLEX was running again.</p>

<p>That&rsquo;s what docker is good for, to save you from the dependency hell that so often comes with running applications. It lets you say &ldquo;I want this application, here&rsquo;s the config and data&rdquo; instead of saying &ldquo;I need to install a bunch of stuff I don&rsquo;t care about, some of which might conflict with what I currently have installed and also might break because of network issues or corrupted packages, just so I can get to the application I actually want installed.&rdquo; Docker is especially wonderful at handling packages that have conflicting dependencies. Because everything is inside the container, you just don&rsquo;t have to worry about it.</p>

<p>The way I see it, docker solves a real problem that has driven SysAdmins totally nuts. Docker allows clean and easy packaging of applications, it removes the unknowns of deployment and allows apps&#8217; dependencies to be pinned to a version. If designed correctly, they also allow package maintainers to easily update internal dependencies and application code without worrying about all of the possible platforms that users might be running. It does this well. It does it so well that people begin to think they don&rsquo;t actually need configuration management. Depending on your environment, you might not, or might not need much more than a simple manifest and <code>puppet apply</code>.</p>

<p>The thing is, puppet and docker solve different problems. Puppet is often used to solve some of the problems that docker solves, that&rsquo;s true. For those cases, docker is better, hands down. Puppet does make it much easier to manage applications and all the hassle of updates and patches. But that isn&rsquo;t really what puppet it for. Puppet is a way of defining infractructure in a declarative way. It&rsquo;s a way of defining the finished state of a system and a tool for making that happen. I&rsquo;m really glad that Gareth built the docker module for puppet because it&rsquo;s a great example of how puppet and docker work well together.</p>

<p>My PLEX server is case in point, it&rsquo;s defined by puppet, and the &ldquo;application&rdquo; (i.e. the docker container of the PLEX app and dependencies) is managed by puppet. Docker takes care of what docker is good at, puppet takes care of what puppet is good at.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning With Instant Feedback]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/04/learning-with-instant-feedback/"/>
    <updated>2015-02-04T17:50:04-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/04/learning-with-instant-feedback</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="http://vimeo.com/36579366">this somewhat mind-blowing video</a>. I know he&rsquo;s making a larger point about purpose in life, and I think he&rsquo;s got a point, but really the part that blew me away was the idea of instant feedback not just as a &ldquo;crutch&rdquo; for learning, but as he put it &ldquo;writing code without a blindfold on&rdquo;. It also occurs to me that part of the reason more people don&rsquo;t code is because it involves different parts of the brain, you have to constantly visualize data and what&rsquo;s happening inside the code while at the same time using your analytical brain to actually create the code.</p>

<p>I know there are people who can do this, to some extent I&rsquo;m one of them. I also know that I sometimes have trouble forming complete sentences when I&rsquo;m deep in hack mode working on some problem. It&rsquo;s also why something like IntelliSense in VisualStudio is so popular, it gives you instant context.</p>

<p>I used to think of that kind of think as cheating, a crutch for those who couldn&rsquo;t remember how to do things. In retrospect, that attitude is probably what kept me from doing more coding after college. It&rsquo;s also an attitude that was reinforced in my CS classes.</p>

<p>Now that I actually have to do some programming as part of my work, I don&rsquo;t really care about cheating. I&rsquo;ll happily use every trick in the book to make things better or build them more quickly. This is especially true of copying or repurposing what others have done (with proper attribution obviously).</p>

<p>With that in mind, I&rsquo;ve been trying to think of ways that I could make writing puppet manifests have a little more instant feedback. <a href="http://github.com/khan/live-editor">Khan Academy has a great project</a> that they use for teaching basic programming with JavaScript. It allows a student to write their code and see the results even before they&rsquo;re finished. This makes errors like missing semicolons at the end of a line almost impossible, because the feedback is so immediate.</p>

<p>I think some of the could be translated to puppet. For example, as a student types code into an editor, puppet-lint could be checking the syntax live. That shouldn&rsquo;t be too tough and could maybe even be done by adapting Khan&rsquo;s editor and just wiring it up to a different output. But the output of puppet is more tangible, in order to check the results of a manifest, it needs to be applied to an actual node and then the node&rsquo;s state needs to be checked.</p>

<p>There are a few pieces to this puzzle:</p>

<ul>
<li>A responsive editor with live feedback on code</li>
<li>A sandbox environment where puppet code can be tested</li>
<li>Serverspec (or similar) tests with a live display of environment status</li>
<li>Some way of arranging the whole thing</li>
</ul>


<p>This isn&rsquo;t really on my official project list, but I&rsquo;m going to try to tackle this one. I&rsquo;ll also write up as much as I can and make a blog series out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Reboot]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/03/blog-reboot/"/>
    <updated>2015-02-03T21:54:34-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/03/blog-reboot</id>
    <content type="html"><![CDATA[<p>Things have changed quite a bit for me in the last year and I&rsquo;ve been feeling the urge to start blogging again. Since my previous blog a bit of a mess and the content was all over the map, I decided to start fresh and keep the content more focused. This time I&rsquo;m going to focus on projects, mostly tech projects, but maybe I&rsquo;ll throw in the occasional cooking or brewing adventure.</p>

<p>The other reason for the reboot is that I&rsquo;m sick of dealing with Wordpress&#8217; nonsense, most recently it was alerting me to an update and wasn&rsquo;t letting me update. Rather than deal with the pain of fixing it by hand, and possibly redeploying and restoring I thought I&rsquo;d just give octopress a try.</p>

<p>My plan is to move this into S3 eventually but for now I&rsquo;m just using the built-in github pages. I like the idea of replacing a heavy slow platform like wordpress with something totally static in S3. Once that&rsquo;s done, I may even transfer my domain over to Amazon too and just get rid of my old hosting provider.</p>

<p>I&rsquo;ll probably recycle some of my old blog, but some of it I&rsquo;ll leave behind, for now I&rsquo;m just going to focus on new content.</p>
]]></content>
  </entry>
  
</feed>
