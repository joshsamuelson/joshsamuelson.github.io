<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Josh Samuelson]]></title>
  <link href="http://joshsamuelson.github.io/atom.xml" rel="self"/>
  <link href="http://joshsamuelson.github.io/"/>
  <updated>2015-03-15T11:15:49-07:00</updated>
  <id>http://joshsamuelson.github.io/</id>
  <author>
    <name><![CDATA[Josh Samuelson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Control Stack]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/03/15/control-stack/"/>
    <updated>2015-03-15T09:22:34-07:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/03/15/control-stack</id>
    <content type="html"><![CDATA[<p>One idea that keeps kicking around in my brain is how hard it is to get back to work after being interrupted, and how computers are able to handle that with ease. I wonder if it might be possible to deal with interruptions the way a computer handles a Control Stack. For the uninitiated, let me explain how a computer deals with things.</p>

<p>For a simple program here&rsquo;s how it works: The computer goes merrily along performing the actions you give it, for example if you tell it something like <code>print "hello"</code> it will print out &ldquo;hello&rdquo; and then move on to the next thing. Maybe the next thing is <code>print 2 + 2</code> and it&rsquo;ll print out &ldquo;4&rdquo; and so on. That&rsquo;s all pretty useless and boring until you add the ability to interrupt what it&rsquo;s doing.</p>

<p>Those interruptions take the form of functions. So, if you wanted to do something fancy, like count the number of letters in a word, you&rsquo;d use a function. That might look something like this <code>print number_of_letters("hello")</code> &ldquo;number_of_letters&rdquo; is the name of the function and &ldquo;hello&rdquo; is the word we&rsquo;re counting. Assuming we&rsquo;ve defined &ldquo;number_of_letters&rdquo; somewhere (or someone else has and we&rsquo;re using their library of functions) we&rsquo;ll see &ldquo;5&rdquo; printed out on the console. But here&rsquo;s the thing, the computer has to remember where it was before it went off to count out those numbers.</p>

<p>The way the computer handles this is with a data structure called a stack. A good analogy is when you&rsquo;re reading a book and you find a word you don&rsquo;t know. Now you could place a bookmark in the book and close it, then grab a dictionary and open that and find your word, close the dictionary and open your book at the bookmark. But keeping track of that bookmark is a hassle, a smarter way is to set the dictionary on top of the open book and find your word. When you&rsquo;re done with the dictionary, you can move it out of the way and pick up where you left off. That&rsquo;s how a control stack in a computer works, execpt it stacks many more levels, a bit like if you&rsquo;re reading a book in a Spanish you might need to look up a word in a Spanish/English dictionary and if you didn&rsquo;t understand the English you&rsquo;d need to look that word up in an English dictionary.</p>

<p>The computer is able to handle a huge control stack and it allows you to do some fancy stuff. For example, for our &ldquo;number_of_letters&rdquo; function we could write it some thing like this:</p>

<pre><code>define number_of_letters(word_to_count)
  count = 0
  for each letter in word_to_count
    add 1 to count
  return count
end
</code></pre>

<p>I hope that&rsquo;s clear enough for people who don&rsquo;t know programming, I don&rsquo;t want to over explain.
That way of doing it is fine, but there is another way of defining that function that makes use of the control stack and it&rsquo;s called &ldquo;recursion&rdquo;</p>

<pre><code>define number_of_letters(word_to_count)
  if word_to_count is blank
    return 0
  else
    return number_of_letters(word_to_count minus the last letter) + 1
end
</code></pre>

<p>So if we&rsquo;re using it will &ldquo;hello&rdquo;, first it tries &ldquo;hello&rdquo;, then &ldquo;hell&rdquo;, then &ldquo;hel&rdquo;, then &ldquo;he&rdquo;, then &ldquo;h&rdquo;, and finally it&rsquo;s blank. Like the stack of dictionaries, as it closes each function, it sends back a value as it looks it up. The number of letters in nothing is 0, so it picks up where it left off which was <code>number_of_letters("h")</code>. But now that it closed that top &ldquo;book&rdquo;, all it has to figure out is &ldquo;0 + 1&rdquo;, so <code>number_of_letters("h")</code> returns 1 and we can close that &ldquo;book&rdquo; and pick up where we left off with <code>number_of_letters("he")</code>. Since we&rsquo;ve figured out <code>number_of_letters("h")</code> is equal to 1, we&rsquo;ll return 1 + 1 from <code>number_of_letters("he")</code>, so <code>number_of_letters("hel")</code> will return 2 + 1, and so on.
This is a trivial example of recursion, but it can be incredbily powerful and it can save a ton of keeping track of the counts of things and elaborate loops. It also let&rsquo;s you make the computer smarter. All it needs to know how to do is check if a word is blank, how to drop the last letter from a word, and how to add. Hopefully this isn&rsquo;t too hard to understand for someone who doesn&rsquo;t know programming.</p>

<p>The point is, that the computer handles all of this with ease because it has the control stack, it adds new tasks to the top of the stack and removes them as their completed and painlessly picks up where it left off. What if we handled interruptions in the same way?</p>

<p>Here&rsquo;s a human example: Checking your email when you start work in the morning.</p>

<p>Say you open your email and see there are 10 new emails. So you start from the top, and read the first one,</p>

<p>So here&rsquo;s what your stack looks like:</p>

<ul>
<li>Check Email</li>
<li>Read First Email</li>
</ul>


<p>Except, that isn&rsquo;t quite right. Even though that&rsquo;s the order you did the things, in a stack the first thing is on the bottom. As you add new tasks, they get put on top.</p>

<p>So the stack is really this:</p>

<ul>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>The first email is about how you&rsquo;re long lost relative in Nigeria has left you a substantial fortune and the sender just needs some money up front to pay the bank transfer fees. After reading that, your stack would look like this:</p>

<ul>
<li>Delete SPAM</li>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>But at that point you decide that you want to complain to the IT department about all the SPAM you&rsquo;d been getting, so before you delete it you send an email to IT.</p>

<ul>
<li>Send Email to IT about SPAM</li>
<li>Delete SPAM</li>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>Once you&rsquo;ve sent the email to IT, you remove it from the stack (or to use the CS term, &ldquo;pop&rdquo; it off the top of the stack). So know you&rsquo;re back to this:</p>

<ul>
<li>Delete SPAM</li>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>So you delete the SPAM, and pop that off the control stack, and since that was the first email, you can also pop &ldquo;Read First Email&rdquo; off the stack. That puts you back to this:</p>

<ul>
<li>Check Email</li>
</ul>


<p>Now there are 9 emails left so you follow the same procedure. Since you deleted the SPAM, the 2nd message now become the &ldquo;first&rdquo;</p>

<ul>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>This one turns out to be from your boss saying &ldquo;Turn in your TPS reports, they were due yesterday!&rdquo;. Which makes you realize that you need to actually write the reports before you can turn them in so your stack turns into:</p>

<ul>
<li>Finish TPS reports</li>
<li>Email TPS reports to boss</li>
<li>Read First Email</li>
<li>Check Email</li>
</ul>


<p>And as your working on the reports you need to contact other people, look things up, get drafts reviewed, etc., etc. And everything is going fine until someone from IT comes by and asks about the SPAM email you contacted them about or you go to get a cup of coffee and someone mentions something else you need to be working on or your dentist&rsquo;s office calls to remind you about your root canal tomorrow. Or all of those things plus the other 8 messages that you haven&rsquo;t even looked at yet. And unlike the computer, your brain loses its control stack and you don&rsquo;t remember that you need to finish the TPS reports until you get an email from your boss saying &ldquo;Your reports are two days late!&rdquo;</p>

<p>Ok so, I know it&rsquo;s not realistic, who only has 10 emails in their inbox every day.</p>

<p>My idea is somewhat simple, just use a stack of sticky notes to emulate the control stack. That way, even if you get 10 interruptions you could still jump right back to working on those TPS reports. Now, I&rsquo;ve seen people use sticky notes to keep track of work and usually it takes the form of a decorative fringe around their computer monitor, with every blank surface covered. That is not what I mean. I&rsquo;m talking about a simple stack, whatever currently has your attention is on top. So you intentionally can&rsquo;t see what&rsquo;s underneath until you&rsquo;re ready to work on it. If something else comes up, just add another note to the top.</p>

<p>So yeah, that&rsquo;s a little wasteful of sticky notes. Maybe a better idea would be to always keep a blank note on top. Then as you&rsquo;re working along if you get interrupted you can just write on that note what you were doing. Once you deal with the interruption you can go right back to whatever that note says and the one below it when that&rsquo;s done and so on. That keeps focus narrow, you don&rsquo;t have to hold all the to-dos in your head while you&rsquo;re doing one of them.</p>

<p>It might even work with a Kanban style system. As interruptions come, sometimes they don&rsquo;t need to be completed, but simply recorded and added to the backlog. So the control stack would always have &ldquo;grab task from backlog&rdquo; at the bottom. Or in reality it would have &ldquo;Plan next project&rdquo; at the bottom, something like this:</p>

<ul>
<li>Do subtask</li>
<li>Do task</li>
<li>Grab next task from backlog</li>
<li>Plan next project</li>
</ul>


<p>Although, most people probably don&rsquo;t need something like &ldquo;plan next project&rdquo; at the bottom since once you&rsquo;ve cleaned everything out you usually know how to decide what you want to do next.</p>

<p>Well, there&rsquo;s the idea and probaly way over exlained. I&rsquo;m going to try it out, I&rsquo;ve been doing pretty well at work getting my tasks done, but I think I end up wasting time and mental effort because I&rsquo;ll get interrupted and need to remember what it was I was working on. This was much worse at previous jobs, where I was interrupted all the time.</p>

<p>I&rsquo;ll report back on how it&rsquo;s going, I can already think of tools that might improve the process like a simple app to keep track of the stack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rinse Repeat]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/18/rinse-repeat/"/>
    <updated>2015-02-18T09:51:58-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/18/rinse-repeat</id>
    <content type="html"><![CDATA[<p>The last few months have been a major crash course for me in configuration management and Puppet in particular. I wouldn&rsquo;t call myself an expert at least considering what counts as a puppet expert at Puppet Labs, but I feel like I know enough now that I could easily do my previous job almost entirely using puppet. A big part of my job now is building VMs that we will use in the classroom. The part that has really changed my perspective is how freely I can now throw something away that doesn&rsquo;t work. My attitude with computers has often been that if something is seriously screwed up, it&rsquo;s often simpler and faster to just start fresh rather than figure out some arcane issue. This is espeically true with Windows desktops OS&rsquo;s. It&rsquo;s also why I get a little annoyed when someone asks me to fix their computer, because if it were mine, I would just wipe it out and start fresh. Doing that too often can be a big pain and with servers it can be seriously risky because it&rsquo;s easy to miss something important.</p>

<p>That&rsquo;s where puppet has really changed my perspective. I realized that I no longer think of the server (or the VM image in my case) as the &ldquo;thing&rdquo; I&rsquo;m managing, that&rsquo;s just the expression of the real thing. The puppet code is what I&rsquo;m managing and maintaining. That let&rsquo;s me make and undo small changes as I work toward improving things, without having to worry how undoing a change might cause issues down the line. It&rsquo;s so easy to start fresh that I don&rsquo;t mind trying something out, throwing away the result, and trying another variation until I find the right solution.</p>

<p>I think this isn&rsquo;t quite what puppet has been used for, or maybe what it was initially intended for, but I think it&rsquo;s really the future of how people will manage most of their systems. Puppet is a great tool for addressing drift, i.e. when something has changed on one system that should otherwise be identical to the others. In the long run, I think it&rsquo;s going to become simpler to just trash a system that has drifted and redeploy from the code.</p>

<p>If you think of it in terms of software its more obvious. If a piece of compiled software becomes corrupted, say because of an issue with the disk, you would never go in to the file and try to repair it so that it matched a known good copy. No, the correct thing to do in that case is to simply redploy the file. Now that so many servers are virtualized or containerized, I think it makes much more sense to think of them as files.</p>

<p>What&rsquo;s been remarkable about this for me is how much it&rsquo;s shifted my thinking. Even when working on projects at home I find myself wanting to set things up in puppet just so I don&rsquo;t have to worry about it when I need to start fresh. It also has me doing something I&rsquo;d never bothered with before for person tinkering, documentation. I&rsquo;m actually documenting my work as I go by writing the puppet code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contain Yourself]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself/"/>
    <updated>2015-02-05T17:14:04-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/05/contain-yourself</id>
    <content type="html"><![CDATA[<p>My most recent project has given me a chance to play with docker again. I first heard of docker when I was in the midst of trying to learn puppet. I remember thinking to myself &ldquo;This is great, I don&rsquo;t have to learn a whole new language, I can just do everything in shell scripts in my Dockerfile, if it gets screwed up I&rsquo;ll just trash it and build a new one.&rdquo;</p>

<p>Now that I understand how puppet works and what it&rsquo;s really for, I realize how silly that way of thinking is. Using docker that way is essentially a more conventient way to manage golden images, but it still fraught with the maintenance nightmares that come from custom setup scripts and golden images. I think the idea of immutable infrastructure is appealing, but it doesn&rsquo;t solve the same problems as configuration management.</p>

<p>What I have gotten a chance to explore is what <em>else</em> docker is good for. I&rsquo;ve been using it for sandboxed nodes in a standalone mockup of a puppet based infrastructure, i.e. a Puppet Enterprise master that also hosts a bunch of docker containers that pretend to be nodes. As far as the master is concerned, they are totally separate machines and it offers a good way to simulate a larger environment in a lightweight way. That&rsquo;s not what docker was designed to do, per se, but it&rsquo;s working amazingly well.</p>

<p>Since I wasn&rsquo;t really using it for it&rsquo;s intended purpose at work, I decided to play around with it at home. I reformatted my iMac, which had been running Mint. It had been acting a little weird, it was having some package management corruption issues, the kind of thing I hate debugging, so I just wiped it out and installed Ubuntu 14.04. One of the things I lost in that was my installation of PLEX which meant I couldn&rsquo;t stream shows from the mac to my TV anymore (Sara was a bit bothered because she wanted to watch MASH). Since I had a fresh install with nothing but docker and puppet installed, I decided to try a dockerized version of PLEX. I found an appropriate image on docker&rsquo;s website and ran it using Gareth Rushgrove&rsquo;s docker module from the puppet forge. Basically all I had to do was declare the container with a couple of folders mapped, one for config and one for data, and that was it PLEX was running again.</p>

<p>That&rsquo;s what docker is good for, to save you from the dependency hell that so often comes with running applications. It lets you say &ldquo;I want this application, here&rsquo;s the config and data&rdquo; instead of saying &ldquo;I need to install a bunch of stuff I don&rsquo;t care about, some of which might conflict with what I currently have installed and also might break because of network issues or corrupted packages, just so I can get to the application I actually want installed.&rdquo; Docker is especially wonderful at handling packages that have conflicting dependencies. Because everything is inside the container, you just don&rsquo;t have to worry about it.</p>

<p>The way I see it, docker solves a real problem that has driven SysAdmins totally nuts. Docker allows clean and easy packaging of applications, it removes the unknowns of deployment and allows apps&#8217; dependencies to be pinned to a version. If designed correctly, they also allow package maintainers to easily update internal dependencies and application code without worrying about all of the possible platforms that users might be running. It does this well. It does it so well that people begin to think they don&rsquo;t actually need configuration management. Depending on your environment, you might not, or might not need much more than a simple manifest and <code>puppet apply</code>.</p>

<p>The thing is, puppet and docker solve different problems. Puppet is often used to solve some of the problems that docker solves, that&rsquo;s true. For those cases, docker is better, hands down. Puppet does make it much easier to manage applications and all the hassle of updates and patches. But that isn&rsquo;t really what puppet it for. Puppet is a way of defining infractructure in a declarative way. It&rsquo;s a way of defining the finished state of a system and a tool for making that happen. I&rsquo;m really glad that Gareth built the docker module for puppet because it&rsquo;s a great example of how puppet and docker work well together.</p>

<p>My PLEX server is case in point, it&rsquo;s defined by puppet, and the &ldquo;application&rdquo; (i.e. the docker container of the PLEX app and dependencies) is managed by puppet. Docker takes care of what docker is good at, puppet takes care of what puppet is good at.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning With Instant Feedback]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/04/learning-with-instant-feedback/"/>
    <updated>2015-02-04T17:50:04-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/04/learning-with-instant-feedback</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="http://vimeo.com/36579366">this somewhat mind-blowing video</a>. I know he&rsquo;s making a larger point about purpose in life, and I think he&rsquo;s got a point, but really the part that blew me away was the idea of instant feedback not just as a &ldquo;crutch&rdquo; for learning, but as he put it &ldquo;writing code without a blindfold on&rdquo;. It also occurs to me that part of the reason more people don&rsquo;t code is because it involves different parts of the brain, you have to constantly visualize data and what&rsquo;s happening inside the code while at the same time using your analytical brain to actually create the code.</p>

<p>I know there are people who can do this, to some extent I&rsquo;m one of them. I also know that I sometimes have trouble forming complete sentences when I&rsquo;m deep in hack mode working on some problem. It&rsquo;s also why something like IntelliSense in VisualStudio is so popular, it gives you instant context.</p>

<p>I used to think of that kind of think as cheating, a crutch for those who couldn&rsquo;t remember how to do things. In retrospect, that attitude is probably what kept me from doing more coding after college. It&rsquo;s also an attitude that was reinforced in my CS classes.</p>

<p>Now that I actually have to do some programming as part of my work, I don&rsquo;t really care about cheating. I&rsquo;ll happily use every trick in the book to make things better or build them more quickly. This is especially true of copying or repurposing what others have done (with proper attribution obviously).</p>

<p>With that in mind, I&rsquo;ve been trying to think of ways that I could make writing puppet manifests have a little more instant feedback. <a href="http://github.com/khan/live-editor">Khan Academy has a great project</a> that they use for teaching basic programming with JavaScript. It allows a student to write their code and see the results even before they&rsquo;re finished. This makes errors like missing semicolons at the end of a line almost impossible, because the feedback is so immediate.</p>

<p>I think some of the could be translated to puppet. For example, as a student types code into an editor, puppet-lint could be checking the syntax live. That shouldn&rsquo;t be too tough and could maybe even be done by adapting Khan&rsquo;s editor and just wiring it up to a different output. But the output of puppet is more tangible, in order to check the results of a manifest, it needs to be applied to an actual node and then the node&rsquo;s state needs to be checked.</p>

<p>There are a few pieces to this puzzle:</p>

<ul>
<li>A responsive editor with live feedback on code</li>
<li>A sandbox environment where puppet code can be tested</li>
<li>Serverspec (or similar) tests with a live display of environment status</li>
<li>Some way of arranging the whole thing</li>
</ul>


<p>This isn&rsquo;t really on my official project list, but I&rsquo;m going to try to tackle this one. I&rsquo;ll also write up as much as I can and make a blog series out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Reboot]]></title>
    <link href="http://joshsamuelson.github.io/blog/2015/02/03/blog-reboot/"/>
    <updated>2015-02-03T21:54:34-08:00</updated>
    <id>http://joshsamuelson.github.io/blog/2015/02/03/blog-reboot</id>
    <content type="html"><![CDATA[<p>Things have changed quite a bit for me in the last year and I&rsquo;ve been feeling the urge to start blogging again. Since my previous blog a bit of a mess and the content was all over the map, I decided to start fresh and keep the content more focused. This time I&rsquo;m going to focus on projects, mostly tech projects, but maybe I&rsquo;ll throw in the occasional cooking or brewing adventure.</p>

<p>The other reason for the reboot is that I&rsquo;m sick of dealing with Wordpress&#8217; nonsense, most recently it was alerting me to an update and wasn&rsquo;t letting me update. Rather than deal with the pain of fixing it by hand, and possibly redeploying and restoring I thought I&rsquo;d just give octopress a try.</p>

<p>My plan is to move this into S3 eventually but for now I&rsquo;m just using the built-in github pages. I like the idea of replacing a heavy slow platform like wordpress with something totally static in S3. Once that&rsquo;s done, I may even transfer my domain over to Amazon too and just get rid of my old hosting provider.</p>

<p>I&rsquo;ll probably recycle some of my old blog, but some of it I&rsquo;ll leave behind, for now I&rsquo;m just going to focus on new content.</p>
]]></content>
  </entry>
  
</feed>
